#include "generate.h"

map<int, pair<TockenType, int>> final_states = {{-9, make_pair(TK_ERROR, 0)},
{-8, make_pair(TK_ERROR, 0)},
{-7, make_pair(TK_ERROR, 0)},
{-6, make_pair(TK_ERROR, 0)},
{-5, make_pair(TK_ERROR, 0)},
{-4, make_pair(TK_ERROR, 0)},
{-3, make_pair(TK_ERROR, 0)},
{-2, make_pair(TK_ERROR, 0)},
{-1, make_pair(TK_EOF, 0)},
{0, make_pair(TK_STR, 0)},
{1, make_pair(TK_UNKNOWN, 1)},
{2, make_pair(TK_INT, 1)},
{3, make_pair(TK_HEX, 1)},
{4, make_pair(TK_SEP, 0)},
{5, make_pair(TK_UNOP, 0)},
{6, make_pair(TK_UNOP, 1)},
{7, make_pair(TK_BINOP, 0)},
{8, make_pair(TK_SEP, 1)},
{9, make_pair(TK_COMENT, 0)},
{10, make_pair(TK_INT, 2)},
{11, make_pair(TK_CODE, 1)},
{12, make_pair(TK_COMENT, 1)},
{13, make_pair(TK_REAL, 1)},
{14, make_pair(TK_EREAL, 1)}};

map<int, vector<int>> transition_table = {{100, {102, 102, 102, 102, 102, 100, 101, 101, 101, 100, 103, 104, 105, 4, 4, 106, 106, 111, 4, 5, 107, 4, 120, 106, 5, 4, 5, 110, 108, -4, -1, -4}},
{101, {101, 101, 101, 101, 101, 1, 101, 101, 101, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}},
{102, {102, 102, 102, 102, 102, 2, 2, 113, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 109, 2, 2, 2, 2}},
{103, {-9, 117, 118, 118, 118, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8}},
{104, {119, 119, 119, 119, 119, -7, 119, 119, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7}},
{105, {105, 105, 105, 105, 105, 105, 105, 105, 105, -2, 105, 105, 0, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, -3, 105}},
{106, {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}},
{107, {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8}},
{108, {108, 108, 108, 108, 108, 108, 108, 108, 108, -2, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 9, -3, 108}},
{109, {121, 121, 121, 121, 121, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, 10, -6, -6, -6, -6}},
{110, {8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 4, 8, 8, 8, 8}},
{111, {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 114, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}},
{113, {123, 123, 123, 123, 123, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, 122, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5}},
{114, {114, 114, 114, 114, 114, 114, 114, 114, 114, 12, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 12, 114}},
{117, {124, 124, 125, 126, 126, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11}},
{118, {126, 126, 126, 126, 126, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11}},
{119, {119, 119, 119, 119, 119, 119, 119, 119, -9, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3}},
{120, {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6}},
{121, {121, 121, 121, 121, 121, 13, 13, 113, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13}},
{122, {123, 123, 123, 123, 123, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5}},
{123, {123, 123, 123, 123, 123, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14}},
{124, {126, 126, 126, 126, 126, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11}},
{125, {126, 126, 126, 126, -9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11}},
{126, {-9, -9, -9, -9, -9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11}}};


string Token::description() {
	if (type == TK_ERROR) return value;
	else if (type == TK_STR) return "string";
	else if (type == TK_CHAR) return "char";
	else if (type == TK_INT) return "integer";
	else if (type == TK_KEYWORD) return "keyword";
	else if (type == TK_SEP) return "sep";
	else if (type == TK_BINOP || type == TK_UNOP || type == TK_OP) return "op";
	else if (type == TK_COMENT) return "coment";
	else if (type == TK_IDENT) return "ident";
	else if (type == TK_REAL || type == TK_EREAL) return "real";
	else return "code";
}

int chartostate(char c) {
	if (c == '0') return 0;
	if (c == '1') return 1;	
	if (c == '2') return 2;
	if (c >= '3' && c <= '7') return 3;
	if (c == '8' || c == '9') return 4;
	if (c == 32 || c == 9) return 5;
	if (c >= 'a' && c <= 'd' || c == 'f'
		|| c >= 'A' && c <= 'D' || c == 'F') return 6;
	if (c == 'e' || c == 'E') return 7;
	if (c >= 'g' && c <= 'z' || c == '_' ||
		c >= 'G' && c <= 'Z') return 8;
	switch (c) {
	case 10 : return 9;
	case '#': return 10;
	case '$': return 11;
	case 39: return 12;
	case '(': return 13;
	case ')': return 14;
	case '+': case '-': return 15;
	case '*': return 16;
	case '/': return 17;
	case ',': return 18;
	case '=': return 19;
	case ':': return 20;
	case ';': return 21;
	case '<': return 22;
	case '>': return 23;
	case '@': return 24;
	case '[': case ']': return 25;
	case '^': return 26;
	case '.': return 27;
	case '{': return 28;
	case '}': return 29;
	case 0: return 30;
	default:
		return 31;
	}
}; 